_____________DONE: _____________


. commit stable tag.

_____________TODO: _____________
* Implement dependencies handling using Poetry

* fix update_trades() function that prints duplicate trades data

* define specific lists like (__endpoints__) in nobitex_data to modules and packages

* change 'BASE_URL' and 'TESTNET' to 'URL.MAIN' and 'URL.TEST'.


* remove unnecessary returns from OHLCData class


* change assigning the previous top and bottom band to replace NaNs with zero.

1* Refactor 'OHLCData' class
	Refactor the class using AsyncIO, HTTPX, and it's client module to make sessions like requests library to receive data faster. Also using AsyncIO, make this class and it's methods capable to be called concurrently with any other method or function when using in main code.

* Using AsyncIO await the API functions for sleep time.

* Use Ternary if operation for OHLCData.get.param

* check given arguments in order.place.params for mandatory parameters of each order kind: (oco, futures, spot)

* turn aplicable functions to AsyncIO and Threading.

* Integrate config.RATE_LIMIT to functions

* turn supertrend.entry into a class

* make a function for supertrend.entry to make analysis just on last candle row.

* make class or function in trader.py to watch the signal dataframe for signals and call the corresponding method from order.place

* Rename the Repositori to ...

* Rename the nobitex.py to exchange.py

* send string values in requests.

* inside setups/supertrend.py refactor signal function to a class and modify project to be compatible with it.

* handle error in OHLCData.get method when response.text == {"s":"no_data"} and it raises error 't'.

* handle error in OHLCData.new method when the get method returns epty dataframe and None for update time.

* Configure OHLCData class to get symbol and res parameters from config file.

* configure indicator and signal dataframes to continuously check kline_df for new data then update themself if there are new data.

* configure DataManager to run live updates for dataframes without a sleep time.

* how can i configure my OHLCData code in order that when requesting for data untill new data arrives doesn't wait longer than rate_limit time and make another request concurrently.

* I wrote the DataManager class and i think i have some mistakes for how i made the initiate_kline_df asyncronously or how i run it on line :
```
asyncio.run(data_manager.initiate_kline_df())
```

* rename the update_supertrend() function to IndicatorSupervisor class and move it to a new corresponding module. Inside it call the monitoring task asyncronusly and call each indicator function including pandas_supertrend asyncronusly too. then only bring this supervisor to the DataManager class.

* instead of seperate method for each dataframe in DataManager class maybe it's better to central methods for initiating, populating, gettign, ...