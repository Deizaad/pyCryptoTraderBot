_____________DONE: _____________


. commit stable tag.

. noun: stage Further_Commits.txt.

_____________TODO: _____________
* fix update_trades() function that prints duplicate trades data

* define specific lists like (__endpoints__) in nobitex_data to modules and packages

* change assigning the previous top and bottom band to replace NaNs with zero.

* check given arguments in order.place.params for mandatory parameters of each order kind: (oco, futures, spot)

* turn aplicable functions to AsyncIO and Threading.

* turn supertrend.entry into a class

* make a function for supertrend.entry to make analysis just on last candle row.

* inside setups/supertrend.py refactor signal function to a class and modify project to be compatible with it.

* handle error in OHLCData.get method when response.text == {"s":"no_data"} and it raises error 't'.

* handle error in OHLCData.new method when the get method returns empty dataframe and None for update time.

* how can i configure my OHLCData code in order that when requesting for data untill new data arrives doesn't wait longer than rate_limit time and make another request concurrently.

* I wrote the DataManager class and i think i have some mistakes for how i made the initiate_kline_df asyncronously or how i run it on line :
```
asyncio.run(data_manager.initiate_kline_df())
```

* bring this supervisor to the DataManager class.

* instead of seperate method for each dataframe in DataManager class maybe it's better to central methods for initiating, populating, gettign, ...

* Improve the design pattern of three Supervisors.

* what would be the disaster action in case of api max retries?

* make kline data fetching interval down to 0.7 a second, then bring it back to 0.9 if it reachees 60 calls per minute

* somehow keep track of wether bot has started normally or after system restart or bot crash.

* In the NobitexMarket, implement the wait-time inside the _request itself and move it from fetch loop.

* add conditional parameter for end time in kline_loop() method.

* Announce the issue of live_kline method calls more then rate_limit.

* use plugin architecture and microservices to perform different operations in bot

* make a signal-generator module that connects setups-functions to the event channels.

* rename the Study class of config.py to analysis.

* properties of required_indicators in setup_functions module most be passed as parameters to be provided with arguments from config file later in the code.

* Rename 'execution_mode' to 'execution_profile' in execution/ directory and in config file.

* Add 'perfered_events' attribute to the setup functions so they can determine which event channel each one listens to.

* in pandas_supertrend define the default values of window and factor where those are not provided.

* Run the bot.py in docker container without docstrings and without debug moede using "python -oo bot.py"

* mount configuration files to avoid rebuilding the docker image for configuration changes. 

* In the 'indicator_handler function of IndicatorChief class update the indicator_df with result_df properly.

* change the event channel that indicator functions getting connected to, to Event.NEW_KLINES

* market api most wait for first tick of candle to get init_fetch()

* Implement a function in each exchange_api.py module that checks connection ping delay with that exchange.

* Configure live_kline method in Market class in nobitex_api.py to also fetch data for each of chosen timeframes, pairs, ..., and deliver them.

* create an admin-config file to include data like preferred timeout for api calls or preferred api retries.

* Modify the 'place' method of 'Order' class in nobitex_api.py module to give the client in __init__() method and also to give endpoint as parameter.

* modify the 'timeout' parameter in APIService class to be double for first time when the Asyncclient has not been connected.

* rename the 'NobitexTrader' directory to 'Application'

* make a singular module named 'Supervisor' and bring all chiefs to same place.

* Add statement to Dockerfile to fix system time (timezone) automatically.

* Refactor the structure of config files.

* Modify the DataProcessor to process data for every symbol and resolution and ... in config file.

* Build the production docker container using multi-stage build.

* Seperate .dockerignore for development from .dockerignore for production.

* Create and use a USER with least privilages when building docker image for production.

* Scan the production docker image for vulnerabilities using Docker scan or scan automatically using dockerhub.

* Setup Volume for Docker container development environment.

* Remove the 'client' from 'Market' class's '__init__()' method and bring it to it's functional method's parameters because each method needs it's own client.

* Modify the '_prior_timestamp' method to be responsible when provided data is 0

* Move the '_prior_timestamp' method to 'data_tools.py' module?

* Modify the '_prior_timestamp' method to accept current data as DataFrame.

* Add functions to the 'validator.py' module to check if data is in order, data chain has sequence, no duplicate data.

* Modify 'botlogger.py' to also log Jalali dates.

* Configuring NTP Server on host.

* Use 'timedatectl set-timezone Asia/Tehran' as Dockerfile RUN command?

* Fix 'day_folder_name' and 'month_folder_name' in 'botlogger.py' to to be set to currect timezone.

* Configure the 'format=' parameter from logging.basicconfig to write time with the currect timezone.

* Configure the 'format=' parameter from logging.basicconfig to write time in Jalali.

* refactor the logs file name to also contain day month and year but keep the time first.

* Use polars instead of pandas.

* Move the 'event_handler.py' and 'event_channels.py' to 'events' directory and rename them accordingly.

* in 'event_handler.py' replace the positions of listeners and events in method parameters.

* Maybe it's better to convert chiefs/Supervisors into functions from classes?

* Move the declaration of setup functions and indicator functions to one place so it executes once.

* Seperate the implementation of fetching open positions for futures and spot market.

* Set the maximum of concurrent open positions to 100 per user per market environment (spot and futures) due to the architecture of nobitex's positions API thet causes need of multiple fetch requests for open positions of more than 100 however it can be increased by fetching open positions for each specific trading pair.

* use aiolimiter.asynclimiter.acquire() method wherever I have used the asynclimiter.

* Make the bot work in a way that if trading conditions met and there was an entry signal on previous candle place an entry trade under some predefined circumstances.

* In position sizing determine the minimum and maximum position size based on market condition, pair.

* store stats of open position / trades in csv or sql database or caching them.

* Configure the production Dockerfile to use anothr user other than root.

* for production use .lock file instead of poetry.pyproject to install dependencies with the version that was working on development.

* Modify Jarchi to be able to accept the supplies when registering events optionally (not mandatory)

* Modify Jarchi to also raise exception for when user passes a supply that hasn't been registered along with the event.

* Confirm the implementation of trade_engine.fetch_gadabouts() function for the part that it: "# In case of remaining positions, check whether available orders are valid for them or not" (Validating the position size coverage)

* Move the Implementation of fetch_gadabouts() function from disaster actions to data_processor

* Complete confirmation and retry logic for close_all_positions() method.

* Write an script to run the container on server at startup and make sure this script gets executed on startup every time.

* Write an script to run the bot.py at container startup and make sure this script gets executed on start of container every time.

* Solve the bug of EventHandler.detach method causing error: {Detaching "generating_signals" from event channel "new indicators data arrived": It wasntbeen attached yet!
Inside recovery_mechanism() function: list.remove(x): x not in list}

** at the time, the signal validation mechanism is not compatible with having more than one setup (including all setups: Entry, take_profit, and stop_loss) because it gets applied on all new and late signals and only emits on NEW_VALID_SIGNAL event channel without considering which setup it is checking and which setup it is emitting for. Solve this.

* Try to refactor the 'nobitex.Trade.close_all_positions()' method in order to stop using fetch_market_price() method.